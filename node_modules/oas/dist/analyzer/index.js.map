{"version":3,"sources":["../../src/analyzer/queries/openapi.ts","../../src/analyzer/queries/readme.ts","../../src/analyzer/index.ts"],"sourcesContent":["import type { OASDocument } from '../../types.js';\n\nimport Oas from '../../index.js';\nimport { query, refizePointer } from '../util.js';\n\n/**\n * Determine if a given API definition uses the `additionalProperties` schema property.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}\n */\nexport function additionalProperties(definition: OASDocument): string[] {\n  return query(['$..additionalProperties'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes `callbacks`.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#callback-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#callback-object}\n */\nexport function callbacks(definition: OASDocument): string[] {\n  return query(['$.components.callbacks', '$.paths..callbacks'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition has circular refs.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}\n */\nexport async function circularRefs(definition: OASDocument): Promise<string[]> {\n  // Dereferencing will update the passed in variable, which we don't want to do, so we\n  // instantiated `Oas` with a clone.\n  // eslint-disable-next-line try-catch-failsafe/json-parse\n  const oas = new Oas(JSON.parse(JSON.stringify(definition)));\n  await oas.dereference();\n\n  const results = oas.getCircularReferences();\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine if a given API definition utilizes common parameters.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#path-item-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#path-item-object}\n */\nexport function commonParameters(definition: OASDocument): string[] {\n  return query(['$..paths[*].parameters'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes discriminators.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#discriminator-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#discriminator-object}\n */\nexport function discriminators(definition: OASDocument): string[] {\n  return query(['$..discriminator'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes `links`.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#link-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#link-object}\n */\nexport function links(definition: OASDocument): string[] {\n  return query(['$..links'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine all of the available media types used within an API definition.\n *\n * @todo This query currently picks up false positives if there is an object named `content`.\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#request-body-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#request-body-object}\n */\nexport function mediaTypes(definition: OASDocument): string[] {\n  const results = Array.from(\n    new Set(\n      query(['$..paths..content'], definition)\n        .map(res => {\n          // This'll transform `results`, which looks like `[['application/json'], ['text/xml']]`\n          // into `['application/json', 'text/xml']`.\n          return Object.keys(res.value);\n        })\n        .flat(),\n    ),\n  );\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine if a given API definition uses parameter serialization.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#parameter-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#parameter-object}\n */\nexport function parameterSerialization(definition: OASDocument): string[] {\n  return query(['$..parameters[*].style^'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes schema polymorphism and/of interitance.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}\n */\nexport function polymorphism(definition: OASDocument): string[] {\n  const results = Array.from(\n    new Set(query(['$..allOf^', '$..anyOf^', '$..oneOf^'], definition).map(res => refizePointer(res.pointer))),\n  );\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine every kind of security type that a given API definition has documented.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#security-scheme-object}\n */\nexport function securityTypes(definition: OASDocument): string[] {\n  return Array.from(new Set(query(['$.components.securitySchemes..type'], definition).map(res => res.value as string)));\n}\n\n/**\n * Determine if a given API definition utilizes server variables.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#server-variable-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#server-variable-object}\n */\nexport function serverVariables(definition: OASDocument): string[] {\n  return query(['$.servers..variables^'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine how many operations are defined in a given API definition.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#operation-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#operation-object}\n */\nexport function totalOperations(definition: OASDocument): number {\n  return query(['$..paths[*]'], definition)\n    .map(res => Object.keys(res.value))\n    .flat().length;\n}\n\n/**\n * Determine if a given API definition utilizes `webhooks` support in OpenAPI 3.1.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#oasWebhooks}\n */\nexport function webhooks(definition: OASDocument): string[] {\n  return query(['$.webhooks[*]'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition has XML schemas, payloads, or responses.\n *\n * @todo detect `+xml` media types\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#xml-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#xml-object}\n */\nexport function xml(definition: OASDocument): string[] {\n  return query(\n    [\n      '$.components.schemas..xml^',\n      '$..parameters..xml^',\n      '$..requestBody..xml^',\n\n      \"$..requestBody..['application/xml']\",\n      \"$..requestBody..['application/xml-external-parsed-entity']\",\n      \"$..requestBody..['application/xml-dtd']\",\n      \"$..requestBody..['text/xml']\",\n      \"$..requestBody..['text/xml-external-parsed-entity']\",\n      '$..requestBody.content[?(@property.match(/\\\\+xml$/i))]',\n\n      \"$..responses..['application/xml']\",\n      \"$..responses..['application/xml-external-parsed-entity']\",\n      \"$..responses..['application/xml-dtd']\",\n      \"$..responses..['text/xml']\",\n      \"$..responses..['text/xml-external-parsed-entity']\",\n      '$..responses[*].content[?(@property.match(/\\\\+xml$/i))]',\n    ],\n    definition,\n  ).map(res => refizePointer(res.pointer));\n}\n","import type { OASDocument } from '../../types.js';\n\nimport { query, refizePointer } from '../util.js';\n\n/**\n * Determine if a given API definition is using our `x-default` extension for defining auth\n * defaults.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#authentication-defaults}\n */\nexport function authDefaults(definition: OASDocument): string[] {\n  return query([\"$.components.securitySchemes..['x-default']^\"], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine all of the code sample languages, using the `x-readme.samples-languages` extension\n * that are specified within an API definition.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#code-sample-languages}\n */\nexport function codeSampleLanguages(definition: OASDocument): string[] {\n  const results: string[] = Array.from(\n    new Set(\n      query([\"$..['x-readme']['samples-languages']\", \"$..['x-samples-languages']\"], definition)\n        .map(res => res.value as string)\n        .reduce((prev, next) => prev.concat(next), []),\n    ),\n  );\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine if a given API defintion is using the `x-samples-enabled` extension for disabling\n * code samples.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#disable-code-examples}\n */\nexport function codeSamplesDisabled(definition: OASDocument): string[] {\n  return Array.from(\n    new Set(\n      query(\n        [\n          \"$['x-samples-enabled']^\",\n          \"$['x-readme']['samples-enabled']\",\n          \"$..paths[*]..['x-samples-enabled']^\",\n          \"$..paths[*]..['x-readme']['samples-enabled']^^\",\n        ],\n        definition,\n      ).map(res => refizePointer(res.pointer)),\n    ),\n  );\n}\n\n/**\n * Determine if a given API definition is using our `x-proxy-enabled` extension for disabling the\n * \"Try It\" CORS proxy.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#cors-proxy-enabled}\n */\nexport function corsProxyDisabled(definition: OASDocument): string[] {\n  return Array.from(\n    new Set(\n      query(\n        [\n          \"$['x-proxy-enabled']^\",\n          \"$['x-readme']['proxy-enabled']\",\n          \"$..paths[*]..['x-proxy-enabled']^\",\n          \"$..paths[*]..['x-readme']['proxy-enabled']^^\",\n        ],\n        definition,\n      ).map(res => refizePointer(res.pointer)),\n    ),\n  );\n}\n\n/**\n * Determine if a given API definition is using our `x-code-samples` extension for documentating\n * custom code samples.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#custom-code-samples}\n */\nexport function customCodeSamples(definition: OASDocument): string[] {\n  return query([\"$..['x-code-samples']\", \"$..['x-readme']['code-samples']\"], definition)\n    .filter(res => {\n      // If `code-samples` is an empty array then we ignore it.\n      return Array.isArray(res.value) && res.value.length ? res : false;\n    })\n    .map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition is using our `x-explorer-enabled` extension for disabling\n * \"Try It\" functionality.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#disable-the-api-explorer}\n */\nexport function explorerDisabled(definition: OASDocument): string[] {\n  return query(\n    [\n      \"$['x-explorer-enabled']^\",\n      \"$['x-readme']['explorer-enabled']\",\n      \"$..paths[*]..['x-explorer-enabled']^\",\n      \"$..paths[*]..['x-readme']['explorer-enabled']^^\",\n    ],\n    definition,\n  ).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition uses the `RAW_BODY` manual API hack for raw body content.\n *\n * @see {@link https://docs.readme.com/main/docs/manual-api-editor#raw-body-content-body-content}\n */\nexport function rawBody(definition: OASDocument): string[] {\n  return query(['$..RAW_BODY^^'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition is using our `x-readme.headers` extension for defining\n * static headers.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#static-headers}\n */\nexport function staticHeaders(definition: OASDocument): string[] {\n  return query([\"$..['x-headers']\", \"$..['x-readme']['headers']\"], definition)\n    .filter(res => {\n      // If `headers` is an empty array then we ignore it.\n      return Array.isArray(res.value) && res.value.length ? res : false;\n    })\n    .map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition previously had references by checking if we added the\n * `x-readme-ref-name` extension after dereferencing.\n */\nexport function refNames(definition: OASDocument): string[] {\n  return query([\"$..['x-readme-ref-name']\"], definition).map(res => refizePointer(res.pointer));\n}\n","import type { OASAnalysis } from './types.js';\nimport type { OASDocument } from '../types.js';\n\nimport * as OPENAPI_QUERIES from './queries/openapi.js';\nimport * as README_QUERIES from './queries/readme.js';\n\n/**\n * Analyze a given OpenAPI or Swagger definition for any OpenAPI, JSON Schema, and ReadMe-specific\n * feature uses it may contain.\n *\n * @todo this might be worth moving into the `oas` package at some point\n */\nexport default async function analyzer(definition: OASDocument): Promise<OASAnalysis> {\n  const additionalProperties = OPENAPI_QUERIES.additionalProperties(definition);\n  const callbacks = OPENAPI_QUERIES.callbacks(definition);\n  const circularRefs = await OPENAPI_QUERIES.circularRefs(definition);\n  const commonParameters = OPENAPI_QUERIES.commonParameters(definition);\n  const discriminators = OPENAPI_QUERIES.discriminators(definition);\n  const links = OPENAPI_QUERIES.links(definition);\n  const parameterSerialization = OPENAPI_QUERIES.parameterSerialization(definition);\n  const polymorphism = OPENAPI_QUERIES.polymorphism(definition);\n  const serverVariables = OPENAPI_QUERIES.serverVariables(definition);\n  const webhooks = OPENAPI_QUERIES.webhooks(definition);\n  const xml = OPENAPI_QUERIES.xml(definition);\n\n  const authDefaults = README_QUERIES.authDefaults(definition);\n  const codeSampleLanguages = README_QUERIES.codeSampleLanguages(definition);\n  const customCodeSamples = README_QUERIES.customCodeSamples(definition);\n  const codeSamplesDisabled = README_QUERIES.codeSamplesDisabled(definition);\n  const disabledCorsProxy = README_QUERIES.corsProxyDisabled(definition);\n  const explorerDisabled = README_QUERIES.explorerDisabled(definition);\n  const staticHeaders = README_QUERIES.staticHeaders(definition);\n  const rawBody = README_QUERIES.rawBody(definition);\n  const refNames = README_QUERIES.refNames(definition);\n\n  const analysis: OASAnalysis = {\n    general: {\n      mediaTypes: {\n        name: 'Media Type',\n        found: OPENAPI_QUERIES.mediaTypes(definition),\n      },\n      operationTotal: {\n        name: 'Operation',\n        found: OPENAPI_QUERIES.totalOperations(definition),\n      },\n      securityTypes: {\n        name: 'Security Type',\n        found: OPENAPI_QUERIES.securityTypes(definition),\n      },\n    },\n    openapi: {\n      additionalProperties: {\n        present: !!additionalProperties.length,\n        locations: additionalProperties,\n      },\n      callbacks: {\n        present: !!callbacks.length,\n        locations: callbacks,\n      },\n      circularRefs: {\n        present: !!circularRefs.length,\n        locations: circularRefs,\n      },\n      commonParameters: {\n        present: !!commonParameters.length,\n        locations: commonParameters,\n      },\n      discriminators: {\n        present: !!discriminators.length,\n        locations: discriminators,\n      },\n      links: {\n        present: !!links.length,\n        locations: links,\n      },\n      style: {\n        present: !!parameterSerialization.length,\n        locations: parameterSerialization,\n      },\n      polymorphism: {\n        present: !!polymorphism.length,\n        locations: polymorphism,\n      },\n      serverVariables: {\n        present: !!serverVariables.length,\n        locations: serverVariables,\n      },\n      webhooks: {\n        present: !!webhooks.length,\n        locations: webhooks,\n      },\n      xml: {\n        present: !!xml.length,\n        locations: xml,\n      },\n    },\n    readme: {\n      'x-default': {\n        present: !!authDefaults.length,\n        locations: authDefaults,\n      },\n      'x-readme.code-samples': {\n        present: !!customCodeSamples.length,\n        locations: customCodeSamples,\n      },\n      'x-readme.headers': {\n        present: !!staticHeaders.length,\n        locations: staticHeaders,\n      },\n      'x-readme.explorer-enabled': {\n        present: !!explorerDisabled.length,\n        locations: explorerDisabled,\n      },\n      'x-readme.proxy-enabled': {\n        present: !!disabledCorsProxy.length,\n        locations: disabledCorsProxy,\n      },\n      'x-readme.samples-languages': {\n        present: !!codeSampleLanguages.length,\n        locations: codeSampleLanguages,\n      },\n      'x-readme-ref-name': {\n        present: !!refNames.length,\n        locations: refNames,\n      },\n    },\n  };\n\n  // We should only surface analysis for deprecated features and extensions if they have them as\n  // there's no reason to give them information about something they can't use and should no longer\n  // know about.\n  if (codeSamplesDisabled.length) {\n    analysis.readme['x-readme.samples-enabled'] = {\n      present: !!codeSamplesDisabled.length,\n      locations: codeSamplesDisabled,\n    };\n  }\n\n  if (rawBody.length) {\n    analysis.readme.raw_body = {\n      present: !!rawBody.length,\n      locations: rawBody,\n    };\n  }\n\n  return analysis;\n}\n"],"mappings":"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","names":["additionalProperties","callbacks","circularRefs","commonParameters","discriminators","links","parameterSerialization","polymorphism","serverVariables","webhooks","xml","authDefaults","codeSampleLanguages","customCodeSamples","codeSamplesDisabled","explorerDisabled","staticHeaders","rawBody","refNames"]}