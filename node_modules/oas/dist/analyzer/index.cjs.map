{"version":3,"sources":["/Users/erunion/code/readme/oas/packages/oas/dist/analyzer/index.cjs","../../src/analyzer/queries/openapi.ts","../../src/analyzer/queries/readme.ts","../../src/analyzer/index.ts"],"names":["additionalProperties","callbacks","circularRefs","commonParameters","discriminators","links","parameterSerialization","polymorphism","serverVariables","webhooks","xml","authDefaults","codeSampleLanguages","customCodeSamples","codeSamplesDisabled","explorerDisabled","staticHeaders","rawBody","refNames"],"mappings":"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","file":"/Users/erunion/code/readme/oas/packages/oas/dist/analyzer/index.cjs","sourcesContent":[null,"import type { OASDocument } from '../../types.js';\n\nimport Oas from '../../index.js';\nimport { query, refizePointer } from '../util.js';\n\n/**\n * Determine if a given API definition uses the `additionalProperties` schema property.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}\n */\nexport function additionalProperties(definition: OASDocument): string[] {\n  return query(['$..additionalProperties'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes `callbacks`.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#callback-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#callback-object}\n */\nexport function callbacks(definition: OASDocument): string[] {\n  return query(['$.components.callbacks', '$.paths..callbacks'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition has circular refs.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}\n */\nexport async function circularRefs(definition: OASDocument): Promise<string[]> {\n  // Dereferencing will update the passed in variable, which we don't want to do, so we\n  // instantiated `Oas` with a clone.\n  // eslint-disable-next-line try-catch-failsafe/json-parse\n  const oas = new Oas(JSON.parse(JSON.stringify(definition)));\n  await oas.dereference();\n\n  const results = oas.getCircularReferences();\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine if a given API definition utilizes common parameters.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#path-item-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#path-item-object}\n */\nexport function commonParameters(definition: OASDocument): string[] {\n  return query(['$..paths[*].parameters'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes discriminators.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#discriminator-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#discriminator-object}\n */\nexport function discriminators(definition: OASDocument): string[] {\n  return query(['$..discriminator'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes `links`.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#link-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#link-object}\n */\nexport function links(definition: OASDocument): string[] {\n  return query(['$..links'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine all of the available media types used within an API definition.\n *\n * @todo This query currently picks up false positives if there is an object named `content`.\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#request-body-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#request-body-object}\n */\nexport function mediaTypes(definition: OASDocument): string[] {\n  const results = Array.from(\n    new Set(\n      query(['$..paths..content'], definition)\n        .map(res => {\n          // This'll transform `results`, which looks like `[['application/json'], ['text/xml']]`\n          // into `['application/json', 'text/xml']`.\n          return Object.keys(res.value);\n        })\n        .flat(),\n    ),\n  );\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine if a given API definition uses parameter serialization.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#parameter-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#parameter-object}\n */\nexport function parameterSerialization(definition: OASDocument): string[] {\n  return query(['$..parameters[*].style^'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition utilizes schema polymorphism and/of interitance.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}\n */\nexport function polymorphism(definition: OASDocument): string[] {\n  const results = Array.from(\n    new Set(query(['$..allOf^', '$..anyOf^', '$..oneOf^'], definition).map(res => refizePointer(res.pointer))),\n  );\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine every kind of security type that a given API definition has documented.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#security-scheme-object}\n */\nexport function securityTypes(definition: OASDocument): string[] {\n  return Array.from(new Set(query(['$.components.securitySchemes..type'], definition).map(res => res.value as string)));\n}\n\n/**\n * Determine if a given API definition utilizes server variables.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#server-variable-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#server-variable-object}\n */\nexport function serverVariables(definition: OASDocument): string[] {\n  return query(['$.servers..variables^'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine how many operations are defined in a given API definition.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#operation-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#operation-object}\n */\nexport function totalOperations(definition: OASDocument): number {\n  return query(['$..paths[*]'], definition)\n    .map(res => Object.keys(res.value))\n    .flat().length;\n}\n\n/**\n * Determine if a given API definition utilizes `webhooks` support in OpenAPI 3.1.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#oasWebhooks}\n */\nexport function webhooks(definition: OASDocument): string[] {\n  return query(['$.webhooks[*]'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition has XML schemas, payloads, or responses.\n *\n * @todo detect `+xml` media types\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#xml-object}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#xml-object}\n */\nexport function xml(definition: OASDocument): string[] {\n  return query(\n    [\n      '$.components.schemas..xml^',\n      '$..parameters..xml^',\n      '$..requestBody..xml^',\n\n      \"$..requestBody..['application/xml']\",\n      \"$..requestBody..['application/xml-external-parsed-entity']\",\n      \"$..requestBody..['application/xml-dtd']\",\n      \"$..requestBody..['text/xml']\",\n      \"$..requestBody..['text/xml-external-parsed-entity']\",\n      '$..requestBody.content[?(@property.match(/\\\\+xml$/i))]',\n\n      \"$..responses..['application/xml']\",\n      \"$..responses..['application/xml-external-parsed-entity']\",\n      \"$..responses..['application/xml-dtd']\",\n      \"$..responses..['text/xml']\",\n      \"$..responses..['text/xml-external-parsed-entity']\",\n      '$..responses[*].content[?(@property.match(/\\\\+xml$/i))]',\n    ],\n    definition,\n  ).map(res => refizePointer(res.pointer));\n}\n","import type { OASDocument } from '../../types.js';\n\nimport { query, refizePointer } from '../util.js';\n\n/**\n * Determine if a given API definition is using our `x-default` extension for defining auth\n * defaults.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#authentication-defaults}\n */\nexport function authDefaults(definition: OASDocument): string[] {\n  return query([\"$.components.securitySchemes..['x-default']^\"], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine all of the code sample languages, using the `x-readme.samples-languages` extension\n * that are specified within an API definition.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#code-sample-languages}\n */\nexport function codeSampleLanguages(definition: OASDocument): string[] {\n  const results: string[] = Array.from(\n    new Set(\n      query([\"$..['x-readme']['samples-languages']\", \"$..['x-samples-languages']\"], definition)\n        .map(res => res.value as string)\n        .reduce((prev, next) => prev.concat(next), []),\n    ),\n  );\n\n  results.sort();\n  return results;\n}\n\n/**\n * Determine if a given API defintion is using the `x-samples-enabled` extension for disabling\n * code samples.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#disable-code-examples}\n */\nexport function codeSamplesDisabled(definition: OASDocument): string[] {\n  return Array.from(\n    new Set(\n      query(\n        [\n          \"$['x-samples-enabled']^\",\n          \"$['x-readme']['samples-enabled']\",\n          \"$..paths[*]..['x-samples-enabled']^\",\n          \"$..paths[*]..['x-readme']['samples-enabled']^^\",\n        ],\n        definition,\n      ).map(res => refizePointer(res.pointer)),\n    ),\n  );\n}\n\n/**\n * Determine if a given API definition is using our `x-proxy-enabled` extension for disabling the\n * \"Try It\" CORS proxy.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#cors-proxy-enabled}\n */\nexport function corsProxyDisabled(definition: OASDocument): string[] {\n  return Array.from(\n    new Set(\n      query(\n        [\n          \"$['x-proxy-enabled']^\",\n          \"$['x-readme']['proxy-enabled']\",\n          \"$..paths[*]..['x-proxy-enabled']^\",\n          \"$..paths[*]..['x-readme']['proxy-enabled']^^\",\n        ],\n        definition,\n      ).map(res => refizePointer(res.pointer)),\n    ),\n  );\n}\n\n/**\n * Determine if a given API definition is using our `x-code-samples` extension for documentating\n * custom code samples.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#custom-code-samples}\n */\nexport function customCodeSamples(definition: OASDocument): string[] {\n  return query([\"$..['x-code-samples']\", \"$..['x-readme']['code-samples']\"], definition)\n    .filter(res => {\n      // If `code-samples` is an empty array then we ignore it.\n      return Array.isArray(res.value) && res.value.length ? res : false;\n    })\n    .map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition is using our `x-explorer-enabled` extension for disabling\n * \"Try It\" functionality.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#disable-the-api-explorer}\n */\nexport function explorerDisabled(definition: OASDocument): string[] {\n  return query(\n    [\n      \"$['x-explorer-enabled']^\",\n      \"$['x-readme']['explorer-enabled']\",\n      \"$..paths[*]..['x-explorer-enabled']^\",\n      \"$..paths[*]..['x-readme']['explorer-enabled']^^\",\n    ],\n    definition,\n  ).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition uses the `RAW_BODY` manual API hack for raw body content.\n *\n * @see {@link https://docs.readme.com/main/docs/manual-api-editor#raw-body-content-body-content}\n */\nexport function rawBody(definition: OASDocument): string[] {\n  return query(['$..RAW_BODY^^'], definition).map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition is using our `x-readme.headers` extension for defining\n * static headers.\n *\n * @see {@link https://docs.readme.com/main/docs/openapi-extensions#static-headers}\n */\nexport function staticHeaders(definition: OASDocument): string[] {\n  return query([\"$..['x-headers']\", \"$..['x-readme']['headers']\"], definition)\n    .filter(res => {\n      // If `headers` is an empty array then we ignore it.\n      return Array.isArray(res.value) && res.value.length ? res : false;\n    })\n    .map(res => refizePointer(res.pointer));\n}\n\n/**\n * Determine if a given API definition previously had references by checking if we added the\n * `x-readme-ref-name` extension after dereferencing.\n */\nexport function refNames(definition: OASDocument): string[] {\n  return query([\"$..['x-readme-ref-name']\"], definition).map(res => refizePointer(res.pointer));\n}\n","import type { OASAnalysis } from './types.js';\nimport type { OASDocument } from '../types.js';\n\nimport * as OPENAPI_QUERIES from './queries/openapi.js';\nimport * as README_QUERIES from './queries/readme.js';\n\n/**\n * Analyze a given OpenAPI or Swagger definition for any OpenAPI, JSON Schema, and ReadMe-specific\n * feature uses it may contain.\n *\n * @todo this might be worth moving into the `oas` package at some point\n */\nexport default async function analyzer(definition: OASDocument): Promise<OASAnalysis> {\n  const additionalProperties = OPENAPI_QUERIES.additionalProperties(definition);\n  const callbacks = OPENAPI_QUERIES.callbacks(definition);\n  const circularRefs = await OPENAPI_QUERIES.circularRefs(definition);\n  const commonParameters = OPENAPI_QUERIES.commonParameters(definition);\n  const discriminators = OPENAPI_QUERIES.discriminators(definition);\n  const links = OPENAPI_QUERIES.links(definition);\n  const parameterSerialization = OPENAPI_QUERIES.parameterSerialization(definition);\n  const polymorphism = OPENAPI_QUERIES.polymorphism(definition);\n  const serverVariables = OPENAPI_QUERIES.serverVariables(definition);\n  const webhooks = OPENAPI_QUERIES.webhooks(definition);\n  const xml = OPENAPI_QUERIES.xml(definition);\n\n  const authDefaults = README_QUERIES.authDefaults(definition);\n  const codeSampleLanguages = README_QUERIES.codeSampleLanguages(definition);\n  const customCodeSamples = README_QUERIES.customCodeSamples(definition);\n  const codeSamplesDisabled = README_QUERIES.codeSamplesDisabled(definition);\n  const disabledCorsProxy = README_QUERIES.corsProxyDisabled(definition);\n  const explorerDisabled = README_QUERIES.explorerDisabled(definition);\n  const staticHeaders = README_QUERIES.staticHeaders(definition);\n  const rawBody = README_QUERIES.rawBody(definition);\n  const refNames = README_QUERIES.refNames(definition);\n\n  const analysis: OASAnalysis = {\n    general: {\n      mediaTypes: {\n        name: 'Media Type',\n        found: OPENAPI_QUERIES.mediaTypes(definition),\n      },\n      operationTotal: {\n        name: 'Operation',\n        found: OPENAPI_QUERIES.totalOperations(definition),\n      },\n      securityTypes: {\n        name: 'Security Type',\n        found: OPENAPI_QUERIES.securityTypes(definition),\n      },\n    },\n    openapi: {\n      additionalProperties: {\n        present: !!additionalProperties.length,\n        locations: additionalProperties,\n      },\n      callbacks: {\n        present: !!callbacks.length,\n        locations: callbacks,\n      },\n      circularRefs: {\n        present: !!circularRefs.length,\n        locations: circularRefs,\n      },\n      commonParameters: {\n        present: !!commonParameters.length,\n        locations: commonParameters,\n      },\n      discriminators: {\n        present: !!discriminators.length,\n        locations: discriminators,\n      },\n      links: {\n        present: !!links.length,\n        locations: links,\n      },\n      style: {\n        present: !!parameterSerialization.length,\n        locations: parameterSerialization,\n      },\n      polymorphism: {\n        present: !!polymorphism.length,\n        locations: polymorphism,\n      },\n      serverVariables: {\n        present: !!serverVariables.length,\n        locations: serverVariables,\n      },\n      webhooks: {\n        present: !!webhooks.length,\n        locations: webhooks,\n      },\n      xml: {\n        present: !!xml.length,\n        locations: xml,\n      },\n    },\n    readme: {\n      'x-default': {\n        present: !!authDefaults.length,\n        locations: authDefaults,\n      },\n      'x-readme.code-samples': {\n        present: !!customCodeSamples.length,\n        locations: customCodeSamples,\n      },\n      'x-readme.headers': {\n        present: !!staticHeaders.length,\n        locations: staticHeaders,\n      },\n      'x-readme.explorer-enabled': {\n        present: !!explorerDisabled.length,\n        locations: explorerDisabled,\n      },\n      'x-readme.proxy-enabled': {\n        present: !!disabledCorsProxy.length,\n        locations: disabledCorsProxy,\n      },\n      'x-readme.samples-languages': {\n        present: !!codeSampleLanguages.length,\n        locations: codeSampleLanguages,\n      },\n      'x-readme-ref-name': {\n        present: !!refNames.length,\n        locations: refNames,\n      },\n    },\n  };\n\n  // We should only surface analysis for deprecated features and extensions if they have them as\n  // there's no reason to give them information about something they can't use and should no longer\n  // know about.\n  if (codeSamplesDisabled.length) {\n    analysis.readme['x-readme.samples-enabled'] = {\n      present: !!codeSamplesDisabled.length,\n      locations: codeSamplesDisabled,\n    };\n  }\n\n  if (rawBody.length) {\n    analysis.readme.raw_body = {\n      present: !!rawBody.length,\n      locations: rawBody,\n    };\n  }\n\n  return analysis;\n}\n"]}