{"version":3,"sources":["../src/lib/find-schema-definition.ts","../src/utils.ts"],"sourcesContent":["import jsonpointer from 'jsonpointer';\n\n/**\n * Lookup a reference pointer within an OpenAPI definition and return the schema that it resolves\n * to.\n *\n * @param $ref Reference to look up a schema for.\n * @param definition OpenAPI definition to look for the `$ref` pointer in.\n */\nexport default function findSchemaDefinition($ref: string, definition = {}): any {\n  const origRef = $ref;\n\n  $ref = $ref.trim();\n  if ($ref === '') {\n    // If this ref is empty, don't bother trying to look for it.\n    return false;\n  }\n\n  if ($ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    $ref = decodeURIComponent($ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${origRef}.`);\n  }\n\n  const current = jsonpointer.get(definition, $ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${origRef}.`);\n  }\n\n  return current;\n}\n","import findSchemaDefinition from './lib/find-schema-definition.js';\nimport matchesMimeType from './lib/matches-mimetype.js';\nimport { types as jsonSchemaTypes } from './operation/lib/get-parameters-as-json-schema.js';\n\nconst supportedMethods = ['get', 'put', 'post', 'delete', 'options', 'head', 'patch', 'trace'] as const;\n\nexport { findSchemaDefinition, jsonSchemaTypes, matchesMimeType, supportedMethods };\n"],"mappings":";AAAA,OAAO,iBAAiB;AAST,SAAR,qBAAsC,MAAc,aAAa,CAAC,GAAQ;AAC/E,QAAM,UAAU;AAEhB,SAAO,KAAK,KAAK;AACjB,MAAI,SAAS,IAAI;AAEf,WAAO;AAAA,EACT;AAEA,MAAI,KAAK,WAAW,GAAG,GAAG;AAExB,WAAO,mBAAmB,KAAK,UAAU,CAAC,CAAC;AAAA,EAC7C,OAAO;AACL,UAAM,IAAI,MAAM,mCAAmC,OAAO,GAAG;AAAA,EAC/D;AAEA,QAAM,UAAU,YAAY,IAAI,YAAY,IAAI;AAChD,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MAAM,mCAAmC,OAAO,GAAG;AAAA,EAC/D;AAEA,SAAO;AACT;;;AC3BA,IAAM,mBAAmB,CAAC,OAAO,OAAO,QAAQ,UAAU,WAAW,QAAQ,SAAS,OAAO;","names":[]}