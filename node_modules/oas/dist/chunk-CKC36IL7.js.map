{"version":3,"sources":["../src/analyzer/util.ts"],"sourcesContent":["import { JSONPath } from 'jsonpath-plus';\n\ninterface JSONPathResult {\n  hasArrExpr?: boolean;\n  parent: any;\n  parentProperty: string;\n  path: string;\n  pointer: string;\n  value: any;\n}\n\n/**\n * Run a set of JSONPath queries against an API definition.\n *\n * @see {@link https://jsonpath.com/}\n * @see {@link https://npm.im/jsonpath-plus}\n */\nexport function query(queries: string[], definition: any): JSONPathResult[] {\n  const results = queries\n    .map(q => JSONPath({ path: q, json: definition, resultType: 'all' }))\n    .filter(res => (res.length ? res : false))\n    .reduce((prev, next) => prev.concat(next), []);\n\n  // Always alphabetize our results by the JSON pointer.\n  results.sort((a: JSONPathResult, b: JSONPathResult) => {\n    if (a.pointer < b.pointer) {\n      return -1;\n    } else if (a.pointer > b.pointer) {\n      return 1;\n    }\n\n    return 0;\n  });\n\n  return results;\n}\n\n/**\n * Transform a JSON pointer into a JSON Schema `$ref`-compatible pointer.\n *\n * @example `/paths/~1streams/post/callbacks` -> `#/paths/~1streams/post/callbacks`\n */\nexport function refizePointer(pointer: string) {\n  return `#${pointer}`;\n}\n"],"mappings":";AAAA,SAAS,gBAAgB;AAiBlB,SAAS,MAAM,SAAmB,YAAmC;AAC1E,QAAM,UAAU,QACb,IAAI,OAAK,SAAS,EAAE,MAAM,GAAG,MAAM,YAAY,YAAY,MAAM,CAAC,CAAC,EACnE,OAAO,SAAQ,IAAI,SAAS,MAAM,KAAM,EACxC,OAAO,CAAC,MAAM,SAAS,KAAK,OAAO,IAAI,GAAG,CAAC,CAAC;AAG/C,UAAQ,KAAK,CAAC,GAAmB,MAAsB;AACrD,QAAI,EAAE,UAAU,EAAE,SAAS;AACzB,aAAO;AAAA,IACT,WAAW,EAAE,UAAU,EAAE,SAAS;AAChC,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,CAAC;AAED,SAAO;AACT;AAOO,SAAS,cAAc,SAAiB;AAC7C,SAAO,IAAI,OAAO;AACpB;","names":[]}