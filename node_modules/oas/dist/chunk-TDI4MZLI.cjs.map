{"version":3,"sources":["/Users/erunion/code/readme/oas/packages/oas/dist/chunk-TDI4MZLI.cjs","../src/lib/find-schema-definition.ts","../src/utils.ts"],"names":[],"mappings":"AAAA;ACAA,oGAAwB;AAST,SAAR,oBAAA,CAAsC,IAAA,EAAc,WAAA,EAAa,CAAC,CAAA,EAAQ;AAC/E,EAAA,MAAM,QAAA,EAAU,IAAA;AAEhB,EAAA,KAAA,EAAO,IAAA,CAAK,IAAA,CAAK,CAAA;AACjB,EAAA,GAAA,CAAI,KAAA,IAAS,EAAA,EAAI;AAEf,IAAA,OAAO,KAAA;AAAA,EACT;AAEA,EAAA,GAAA,CAAI,IAAA,CAAK,UAAA,CAAW,GAAG,CAAA,EAAG;AAExB,IAAA,KAAA,EAAO,kBAAA,CAAmB,IAAA,CAAK,SAAA,CAAU,CAAC,CAAC,CAAA;AAAA,EAC7C,EAAA,KAAO;AACL,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,gCAAA,EAAmC,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EAC/D;AAEA,EAAA,MAAM,QAAA,EAAU,qBAAA,CAAY,GAAA,CAAI,UAAA,EAAY,IAAI,CAAA;AAChD,EAAA,GAAA,CAAI,QAAA,IAAY,KAAA,CAAA,EAAW;AACzB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,gCAAA,EAAmC,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EAC/D;AAEA,EAAA,OAAO,OAAA;AACT;ADZA;AACA;AEhBA,IAAM,iBAAA,EAAmB,CAAC,KAAA,EAAO,KAAA,EAAO,MAAA,EAAQ,QAAA,EAAU,SAAA,EAAW,MAAA,EAAQ,OAAA,EAAS,OAAO,CAAA;AFkB7F;AACA;AACE;AACA;AACF,iGAAC","file":"/Users/erunion/code/readme/oas/packages/oas/dist/chunk-TDI4MZLI.cjs","sourcesContent":[null,"import jsonpointer from 'jsonpointer';\n\n/**\n * Lookup a reference pointer within an OpenAPI definition and return the schema that it resolves\n * to.\n *\n * @param $ref Reference to look up a schema for.\n * @param definition OpenAPI definition to look for the `$ref` pointer in.\n */\nexport default function findSchemaDefinition($ref: string, definition = {}): any {\n  const origRef = $ref;\n\n  $ref = $ref.trim();\n  if ($ref === '') {\n    // If this ref is empty, don't bother trying to look for it.\n    return false;\n  }\n\n  if ($ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    $ref = decodeURIComponent($ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${origRef}.`);\n  }\n\n  const current = jsonpointer.get(definition, $ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${origRef}.`);\n  }\n\n  return current;\n}\n","import findSchemaDefinition from './lib/find-schema-definition.js';\nimport matchesMimeType from './lib/matches-mimetype.js';\nimport { types as jsonSchemaTypes } from './operation/lib/get-parameters-as-json-schema.js';\n\nconst supportedMethods = ['get', 'put', 'post', 'delete', 'options', 'head', 'patch', 'trace'] as const;\n\nexport { findSchemaDefinition, jsonSchemaTypes, matchesMimeType, supportedMethods };\n"]}