{"version":3,"sources":["/Users/erunion/code/readme/remove-undefined-objects/dist/index.js","../src/index.ts"],"names":[],"mappings":"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","file":"/Users/erunion/code/readme/remove-undefined-objects/dist/index.js","sourcesContent":[null,"function isObject(obj: unknown) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n}\n\nfunction isEmptyObject(obj: unknown) {\n  return typeof obj === 'object' && obj !== null && !Object.keys(obj).length;\n}\n\ninterface RemovalOptions {\n  removeAllFalsy?: boolean;\n}\n\n// Modified from here: https://stackoverflow.com/a/43781499\nfunction stripEmptyObjects(obj: any, options: RemovalOptions = {}) {\n  const cleanObj = obj;\n\n  if (obj === null && options.removeAllFalsy) {\n    return undefined;\n  }\n\n  if (!isObject(obj) && !Array.isArray(cleanObj)) {\n    return cleanObj;\n  }\n\n  if (!Array.isArray(cleanObj)) {\n    Object.keys(cleanObj).forEach(key => {\n      let value = cleanObj[key];\n\n      if (typeof value !== 'object') {\n        return;\n      }\n\n      if (value === null) {\n        if (options.removeAllFalsy) {\n          delete cleanObj[key];\n        }\n        return;\n      }\n\n      value = stripEmptyObjects(value, options);\n\n      if (isEmptyObject(value)) {\n        delete cleanObj[key];\n      } else {\n        cleanObj[key] = value;\n      }\n    });\n\n    return cleanObj;\n  }\n\n  cleanObj.forEach((o, idx) => {\n    let value = o;\n    if (typeof value === 'object' && value !== null) {\n      value = stripEmptyObjects(value, options);\n\n      if (isEmptyObject(value)) {\n        delete cleanObj[idx];\n      } else {\n        cleanObj[idx] = value;\n      }\n    } else if (value === null) {\n      // Null entries within an array should be removed.\n      delete cleanObj[idx];\n    }\n  });\n\n  // Since deleting a key from an array will retain an undefined value in that array, we need to\n  // filter them out.\n  return cleanObj.filter(el => el !== undefined);\n}\n\nexport default function removeUndefinedObjects<T>(obj?: T, options?: RemovalOptions): T | undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n\n  // JSON.stringify removes undefined values. Though `[undefined]` will be converted with this to\n  // `[null]`, we'll clean that up next.\n  // eslint-disable-next-line try-catch-failsafe/json-parse\n  let withoutUndefined = JSON.parse(JSON.stringify(obj));\n\n  // Then we recursively remove all empty objects and nullish arrays.\n  withoutUndefined = stripEmptyObjects(withoutUndefined, options);\n\n  // If the only thing that's leftover is an empty object then return nothing.\n  if (isEmptyObject(withoutUndefined)) return undefined;\n\n  return withoutUndefined;\n}\n"]}